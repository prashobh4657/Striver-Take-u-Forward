    // No need to memoize like this : Explaination through fibnoacci memoization;
    /*
    int recursive_memoize(int n, vector<int> &dp) // Time : O(n), Space : O(n) (Dp vector) + O(n)(recursive stack);
    {
        if (n == 1 || n == 0)
            return dp[n] = n;
        if (dp[n] != -1)
            return dp[n];
        if (dp[n - 1] == -1)
            dp[n - 1] = recursive_memoize(n - 1, dp);
        if (dp[n - 2] == -1)
            dp[n - 2] = recursive_memoize(n - 2, dp);
        return dp[n - 1] + dp[n - 2];
    }


    int recursive_memoize(int n, vector<int> &dp) // Time : O(n), Space : O(n) (Dp vector) + O(n)(recursive stack);
    {
        if (n == 1 || n == 0)
            return dp[n] = n;
        if (dp[n] != -1)
            return dp[n];
        return dp[n] = recursive_memoize(n - 1, dp) + recursive_memoize(n - 2, dp);
    }

    both memoization are same (We can't say later one is not optimised); as when it will calculate recursive(n-2,dp) it will store it in dp[n-2] anyways (in its call because of last statement hence no need to store like this dp[n - 2] = recursive_memoize(n - 2, dp);
    When you think deeply u came to know that whatever states encountered then its answer will be stored anyways as dp is passed by reference hence no need to write memoization like above way;
    */

//also f(n) actually gives answer for array 0 to n (these two things u keep down in dp) 

// no need to see below (faaltu h wo)

/* above code is insight of my trick but taht trick itself is not right...........
int maximumNonAdjacentSum_memoize(int n, vector<int> a, vector<int> &dp)
{
    if (n < 0)
        return 0;
    if (n == 0)
        return dp[0] = a[0];
    if (dp[n] != -1)
        return dp[n];

    int z1, z2;
    if (dp[n - 1] != -1)
        z1 = dp[n - 1];
    else
        z1 = dp[n - 1] = maximumNonAdjacentSum_memoize(n - 1, a, dp);

    if (n - 2 >= 0) // If n-2 exist;
    {
        if (dp[n - 2] != -1)
            z2 = dp[n - 2];
        else
            z2 = dp[n - 2] = maximumNonAdjacentSum_memoize(n - 2, a, dp); // Here n-2 if not exist then it will run-time error;
        return dp[n] = max(z1, z2 + a[n]);
    }
    else
    {
        // take maximumNonAdjacentSum(n - 2, a) as 0;  (Don't try to access dp[n-2]);
        return dp[n] = max(z1, 0 + a[n]); // alter : dp[n]=max(z1,maximumNonAdjacentSum_memoize(n - 2, a, dp)+a[n]);
    }
}
*/


